#!/bin/sh
#
# Copyright (c) 2013, 2014, Oracle and/or its affiliates.
#
# All rights reserved.
#

# Compile and execute a C++ source file generated by souffle

# List of compilers to use
COMPILERS="clang++ g++ c++"
CXX="" # C++ compiler
# Compiler flags
CPPFLAGS=""
CXXFLAGS="-w -std=c++11 -O3"
LDFLAGS="-lpthread"
# Directory with souffle headers
HEADER_DIR="$(dirname $0)/../include"
# Name of the header that should exist in $HEADER_DIR
# This gives a notion whether a directory with Souffle headers is in place
TEST_HEADER="souffle/CompiledRamRelation.h"
QUIET="" # Suppress warnings
RUN="" # Run the executable over given number of threads
VERBOSE="" # Verbose output

# Show usage
usage() {
  printf "Name:
  souffle-compile - compile a C++ source file generated by souffle
Usage:
  souffle-compile [options] <FILE>.cpp
Options:
  -f           C++ source file to compile
  -h           show usage
  -x=<CXX>     C++ compiler to use
  -o           compile a program with OpenMP support
  -r=<NUM>     execute the generated program over NUM threads
  -v           verbose output
  -q           suppress warnings\n"
  exit 1;
}

# Print a message to STDERR and exit. If the second argument (exit code)
# is provided and it is '0' then do nothing, otherwise print the error message
# along with the usage (if the third argument is defined)
error() {
  if [ -z "$2" ] || ! [ "$2" = 0 ]; then
    echo "souffle-compile error: $1" 1>&2
    if [ -n "$3" ]; then
      usage;
    fi
    exit 1;
  fi
}

# Print a warning
warning() {
  if [ -z "$QUIET" ]; then
    if [ -z "$2" ] || ! [ "$2" = 0 ]; then
      echo "souffle-compile warning: $1" 1>&2
    fi
  fi
}

# Check if a given executable exists in the PATH
has_executable() {
  return `which $1 > /dev/null 2>&1`
}

# Check if a compiler executable given by the first argument defines a macro
# given by the second argument
defines() {
  local cxx="$1"
  $cxx -fopenmp  -dM -E - < /dev/null 2>/dev/null | grep "$2" > /dev/null
  return $?
}

# Check if an executable is a compiler. This checks if the executable defines
# the right macros: # __GNUC__ (g++), or __clang__ (clang), i.e., the compilers
# that are known to work.
is_cxx() {
  local cxx="$1"
  has_executable "$cxx" defines "$cxx" __GNUC__ || defines "$cxx" __clang__;
  return $?
}

# Check if a compiler supports OpenMP (i.e., defines _OPENMP macro)
is_openmp_cxx() {
  defines $cxx _OPENMP
  return $?;
}

# Pick a suitable C++ compiler. This function traverses the list of compilers ($COMPILERS)
# and sets CXX variable. A compiler is deemed suitable if:
#   - defines either __GNUC__ or __clang__ macros (i.e., this is either g++ or clang++)
#   - defines _OPENMP macro if OpenMP support is requested (i.e., OMPFLAGS variable is set by --omp option)
# The function also produces a warning but still sets a compiler if the OpenMP support
# is requested but no compiler with support for OpenMP is found
check_compiler() {
  for cxx in $COMPILERS; do
    if is_cxx "$cxx"; then
      CXX="$cxx"
      if [ -z "$OMPFLAGS" ]; then
        return 0
      else
        if is_openmp_cxx "$cxx"; then
          CXXFLAGS="$CXXFLAGS -fopenmp"
          return 0;
        fi
      fi
    fi
  done

  if [ -n $CXX ]; then
    warning "default to sequential program: no OpenMP compiler found. Tried: $COMPILERS"
    return 0;
  fi
  return 1;
}

# Options processing via getopts builtin, it is very limiting but on OSX the
# default getopt is an old BSD getopt, so need this for portability
while getopts "ox:qvr:hf:" opt; do
  case "$opt" in
    h|\?) # Show usage and exit
      usage;
    ;;
    q) # Suppress warnings
      QUIET="1"
    ;;
    v) # Verbose output
      VERBOSE="set -x"
    ;;
    o) # Compile with openmp support
      OMPFLAGS="-fopenmp"
    ;;
    x) # Compiler
      COMPILERS="$OPTARG"
    ;;
    f) # Source file
      test -z "$INPUT"
      error "multiple -f option" $?
      INPUT="$OPTARG";
      OUTPUT="`basename $INPUT .cpp`" # Output executable
      # Need to make sure that the file has .cpp extension, otherwise the input and
      # output files have same names and the compiler removes the source
      test "$INPUT" != "$OUTPUT"
      error "expected file with extension .cpp, got $INPUT" $?
    ;;
    # Execute the generated program
    r)
      RUN="$OPTARG"
      echo "$RUN" | grep "^[1-9][0-9]*$" > /dev/null
      error "-r option expects positive integer argument starting with [1-9], got '$RUN'" $?
    ;;
  esac
done

# Shift positional arguments
shift $(($OPTIND - 1))

# Bail if there are excessive arguments the script should not process
test -z "$1"
error "non-option argument: '$1'" $?

# Show usage if no input is given
test -n "$INPUT"
error "no input file" $? 1

# Check if the input file exists
test -f "$INPUT"
error "cannot open source file: '$INPUT'" $?

# Find a suitable C++ compiler
check_compiler
error "cannot find suitable C++ compiler in: $COMPILERS" $?

# Check if souffle headers directory is in place
test -f "$HEADER_DIR/$TEST_HEADER"
error "cannot find source for compilation in: $HEADER_DIR" $?

# Compile the input program
($VERBOSE; $CXX $CPPFLAGS $CXXFLAGS -o./$OUTPUT $INPUT -I$HEADER_DIR $LDFLAGS)
error "datalog compiler error: cannot compile source file $1" $?

# Execute the program
if [ -n "$RUN" ]; then
  ($VERBOSE; export OMP_NUM_THREADS="$RUN" && ./$OUTPUT)
  error "error executing compiled program $OUTPUT" $?
fi
exit 0
