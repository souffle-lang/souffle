//
// An example demonstrating context-sensitive trace analysis.
//


// -----------------------------------------------------------------------
//			       input
// -----------------------------------------------------------------------

.type instruction
.type procedure
.type operation

// procedure declarations
.decl p_start(p:procedure, start:instruction)
.decl p_end(p:procedure, end:instruction)

// control flow (only for instructions within the same procedure)
.decl flow(from:instruction,to:instruction)

// call instructions
.decl call(n:instruction,p:procedure)



// -----------------------------------------------------------------------
//			   example program
// -----------------------------------------------------------------------
//
// f:
//	f0: a
//	f1: b
//	    if(...)
//	f2:     c
//	    else
//	f3: 	d
//	    end
//	f4: e
//
//
// g:
//	g0: t
//	g1: call f
//
//
// e:
//	e0: l
//	    if(...)
//	e1:     call o
//	    end
//
// o:
//	o0: m
//	    if(...)
//	o1:     call e
//	    end
//
//
// main:
//	m0: x
//	m1: call f
//	m2: y
//	m3: call g
//	m4: z
//	m5: call e
//	m6: w
//
// -----------------------------------------------------------------------

// procedure f
flow("f0","f1").
flow("f1","f2").
flow("f1","f3").
flow("f2","f4").
flow("f3","f4").

p_start("f","f0").
p_end("f","f4").


// procedure g
flow("g0","g1").

p_start("g","g0").
p_end("g","g1").

call("g1","f").

// procedure e
flow("e0","e1").

p_start("e","e0").
p_end("e","e0").
p_end("e","e1").

call("e1","o").


// procedure o
flow("o0","o1").

p_start("o","o0").
p_end("o","o0").
p_end("o","o1").

call("o1","e").


// procedure main
flow("m0","m1").
flow("m1","m2").
flow("m2","m3").
flow("m3","m4").
flow("m4","m5").
flow("m5","m6").

p_start("main","m0").
p_end("main","m6").

call("m1","f").
call("m3","g").
call("m5","e").

// -----------------------------------------------------------------------
//			       analysis
// -----------------------------------------------------------------------


// -- list of all procedures --
.decl proc(p:procedure)
proc(p) :- p_start(p,_).



// -- instruction to procedure map --
.decl p2i(p:procedure,i:instruction)
p2i(p,i) :- p_start(p,i).
p2i(p,j) :- p2i(p,i), flow(i,j).



// -- call graph --
.decl call_graph(src:procedure,trg:procedure)
call_graph(s,t) :- p2i(s,i), call(i,t).


// -- list of recursive procedures --
.decl rec_proc_reachable(a:procedure,b:procedure)
rec_proc_reachable(a,b) :- call_graph(a,b).
rec_proc_reachable(a,c) :- rec_proc_reachable(a,b), call_graph(b,c).

.decl rec_proc(p:procedure)
rec_proc(p) :- rec_proc_reachable(p,p).



// -- call graph spanning tree --
.decl call_graph_st(src:procedure,trg:procedure)

// with choice:
//call_graph_st("main",x) :- call_graph("main",x).
//call_graph_st(a,b) :- call_graph_st(_,a), call_graph(a,b), choice((b),(a)).

// while not implemented: enumerate
call_graph_st("main","f").
call_graph_st("main","g").
call_graph_st("main","e").
call_graph_st("g","f").
call_graph_st("e","o").

// also collect the back-edges not used in the spanning tree
.decl call_graph_rec_back_edge(src:procedure,trg:procedure)
call_graph_rec_back_edge(s,t) :- rec_proc(s), rec_proc(t), call_graph(s,t), !call_graph_st(s,t).



// -- build up all rechable call contexts --
.decl ctxt(id:number, parent:number, p:procedure)

.decl ctxt_last(id:number,p:procedure)
ctxt_last(id,p) :- ctxt(id,_,p).

.decl ctxt_parent_closure(id:number,parent:number)
ctxt_parent_closure(id,id) :- ctxt(id,_,_).
ctxt_parent_closure(id,gp) :- ctxt(id,p,_), ctxt_parent_closure(p,gp).

.decl ctxt_contains(id:number,p:procedure)
ctxt_contains(id,proc) :- ctxt_parent_closure(id,p), ctxt(p,_,proc).

ctxt(0,0,"main").
ctxt($+1,parent,t) :- ctxt(parent,_,s), call_graph_st(s,t).


.decl ctxts(c:number)
ctxts(c) :- ctxt(c,_,_).


// context connections formed by recursive calls
.decl rec_ctxt_link(from:number,to:number)
rec_ctxt_link(f,t) :- rec_proc(proc), ctxt(t,_,proc), ctxt_contains(f,proc), f!=t.



// -- program points = instruction + context --


// list of all program points
.decl pp(ip:instruction,cp:number)
pp(i,c) :- p2i(p,i),ctxt_last(c,p).



// program point successor relation
.decl pp_succ(ip:instruction,cp:number,is:instruction,cs:number)

// inter-procedure control flow
pp_succ(ip,cp,is,cp) :- pp(ip,cp), flow(ip,is).

// procedure call (non-recursive)
pp_succ(ip,cp,is,cs) :- call(ip,proc), pp(ip,cp), p_start(proc,is), pp(is,cs), ctxt(cs,cp,proc).

// procedure return (non-recursive)
pp_succ(ip,cp,is,cs) :- call(is,proc), pp(is,cs), p_end(proc,ip), ctxt(cp,cs,proc).

// procedure call (recursive)
pp_succ(ip,cp,is,cs) :- call(ip,proc), pp(ip,cp), p_start(proc,is), pp(is,cs), rec_ctxt_link(cp,cs).

// procedure return (recursive)
pp_succ(ip,cp,is,cs) :- call(is,proc), pp(is,cs), p_end(proc,ip), rec_ctxt_link(cs,cp).



// -- collect all instructions before a given program point --

.decl processed_before(pi:instruction,pc:number,i:instruction)
processed_before(pi,pc,i) :- pp_succ(i,_,pi,pc).
processed_before(pi,pc,i) :- pp_succ(a,b,pi,pc), processed_before(a,b,i).



// example query: everything before some specific statements

.decl res_m0(i:instruction)
.output res_m0()
res_m0(i) :- processed_before("m0",_,i).

.decl res_m1(i:instruction)
.output res_m1()
res_m1(i) :- processed_before("m1",_,i).

.decl res_m2(i:instruction)
.output res_m2()
res_m2(i) :- processed_before("m2",_,i).

.decl res_e1(i:instruction)
.output res_e1()
res_e1(i) :- processed_before("e1",_,i).

