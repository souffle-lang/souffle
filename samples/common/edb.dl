//
// Copyright (c) 2013-16, Oracle and/or its affiliates.
//
// The Universal Permissive License (UPL), Version 1.0
// 
// Subject to the condition set forth below, permission is hereby granted to any person obtaining a copy of this software,
// associated documentation and/or data (collectively the "Software"), free of charge and under any and all copyright rights in the 
// Software, and any and all patent rights owned or freely licensable by each licensor hereunder covering either (i) the unmodified 
// Software as contributed to or provided by such licensor, or (ii) the Larger Works (as defined below), to deal in both
// 
// (a) the Software, and
// (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if one is included with the Software (each a “Larger
// Work” to which the Software is contributed by such licensors),
// 
// without restriction, including without limitation the rights to copy, create derivative works of, display, perform, and 
// distribute the Software and make, use, sell, offer for sale, import, export, have made, and have sold the Software and the 
// Larger Work(s), and to sublicense the foregoing rights on either these or other terms.
// 
// This license is subject to the following condition:
// The above copyright notice and either this complete permission notice or at a minimum a reference to the UPL must be included in 
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
// IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Modeled after the specs in the DOOP framework (http://doop.program-analysis.org/)

// Copyright (C) 2008-2009  Martin Bravenboer
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

/*****************************************************************

 Input relations describing a Java input program.

******************************************************************/


//
// ActualParam
//

.decl ActualParam (index:number,invocation:tyMethodInvocationRef,var:tyVarRef)
.input ActualParam 

//
// ArrayType
//

.decl ArrayType (x:tyArrayType)
.input ArrayType 

//
// AssignCast
//

.decl AssignCast (type:tyType,from:tyVarRef,to:tyVarRef,inmethod:tyMethodSignatureRef)
.input AssignCast 


//
// AssignLocal
//

.decl AssignLocal (from:tyVarRef,to:tyVarRef,inmethod:tyMethodSignatureRef)
.input AssignLocal 

//
// AssignReturnValue
//

.decl AssignReturnValue (invocation:tyMethodInvocationRef,to:tyVarRef)
.input AssignReturnValue 

//
// BasicBlockRef
//

.decl BasicBlockRef (basicBlock:tyBasicBlockRef)
.input BasicBlockRef 

//
// BasicBlockEntry
//

.decl BasicBlockEntry (basicBlock:tyBasicBlockRef)
.input BasicBlockEntry 

//
// BasicBlockIn
//

.decl BasicBlockIn (basicBlock:tyBasicBlockRef,method:tyMethodSignatureRef)
.input BasicBlockIn 


//
// BasicBlockExit
//

.decl BasicBlockExit (basicBlock:tyBasicBlockRef)
.input BasicBlockExit

//
// BasicBlockSuccessor
//

.decl BasicBlockSuccessor (b1:tyBasicBlockRef, b2:tyBasicBlockRef)
.input BasicBlockSuccessor 

//
// BasicBlockLastInvocationIndex
//

.decl BasicBlockLastInvocationIndex (b1:tyBasicBlockRef, n:number)
.input BasicBlockLastInvocationIndex 

//
// InvocationBasicBlock
//
.decl InvocationBasicBlock (c:tyMethodInvocationRef, b:tyBasicBlockRef, i:number)
.input InvocationBasicBlock

//
// SuccessorInvocationIndex
//
.decl SuccessorInvocationIndex (i:number, j:number)
.input SuccessorInvocationIndex


//
// ClassConstant
//

.decl ClassConstant (x:tyClassConstant)
.input ClassConstant 

//
// ClassModifier
//

.decl ClassModifier (modifier:tyModifierRef,type:tyType)
.input ClassModifier 

//
// ClassType
//

.decl ClassType (x:tyClassType)
.input ClassType 

//
// ComponentType
//

.decl ComponentType (arrayType:tyArrayType,componentType:tyType)
.input ComponentType 

/* Each instance field of given type is assigned an index, unique number among 
 * other fields of the same type. The field can be then identified by its index 
 * instead of its name. */
.decl DirectFieldIndexSignature (type:tyType,index:number,field:tyFieldSignatureRef)
.input DirectFieldIndexSignature 

//
// DirectSuperclass
//

.decl DirectSuperclass (ref:tyType,super:tyType)
.input DirectSuperclass 

//
// DirectSuperinterface
//

.decl DirectSuperinterface (class:tyType,interface:tyType)
.input DirectSuperinterface 

//
// ExternalHeapAllocation
//

// If OPENWORLD_PER_METHOD is set then a finer set of external heap objects 
//   are generated for each public entry method. As it is defined for each
//   public entry method, it is a computed relation and not part of the EDB.
//  

#ifdef OPENWORLD_PER_METHOD
.decl ExternalHeapAllocation(heap:tyHeapAllocationRef)
#else
.decl ExternalHeapAllocation (heap:tyHeapAllocationRef)
.input ExternalHeapAllocation 
#endif

//
// FieldModifier
//

.decl FieldModifier (modifier:tyModifierRef,field:tyFieldSignatureRef)
.input FieldModifier 

//
// FieldSignature
//

.decl FieldSignature (ref:tyFieldSignatureRef,declaringClass:tyType,simplename:tySimpleNameRef,type:tyType)
.input FieldSignature 

//
// FieldSignatureRef
//

.decl FieldSignatureRef (x:tyString)
.input FieldSignatureRef

//
// FormalParam
//

.decl FormalParam (index:number,method:tyMethodSignatureRef,var:tyVarRef)
.input FormalParam 

//
// HeapAllocationRefDebugInfo
//

.decl HeapAllocationRefDebugInfo (file:tyFile,line:number,heap:tyHeapAllocationRef)
.input HeapAllocationRefDebugInfo 



//
// InstructionIndex
//

.decl InstructionIndex (instruction:tyInstructionRef,index:number)
.input InstructionIndex 

//
// LoadArrayIndex
//

.decl LoadArrayIndex (base:tyVarRef,to:tyVarRef,inmethod:tyMethodSignatureRef)
.input LoadArrayIndex 

//
// LoadInstanceFieldIndex
//

.decl LoadInstanceFieldIndex (base:tyVarRef,index:number,to:tyVarRef,inmethod:tyMethodSignatureRef)
.input LoadInstanceFieldIndex 

//
// LoadPrimStaticField
//

.decl LoadPrimStaticField (sig:tyFieldSignatureRef,inmethod:tyMethodSignatureRef)
.input LoadPrimStaticField 

//
// LoadStaticField
//

.decl LoadStaticField (sig:tyFieldSignatureRef,to:tyVarRef,inmethod:tyMethodSignatureRef)
.input LoadStaticField 

//
// LoadStaticFieldDebugInfo
//

.decl LoadStaticFieldDebugInfo (file:tyFile,line:number,field:tyFieldSignatureRef,to:tyVarRef)
.input LoadStaticFieldDebugInfo 

//
// MethodDeclaration
//

.decl MethodDeclaration (signature:tyMethodSignatureRef,ref:tyMethodSignatureRef)
.input MethodDeclaration 

//
// MethodModifier
//

.decl MethodModifier (mod:tyModifierRef,method:tyMethodSignatureRef)
.input MethodModifier 

//
// MethodSignatureDescriptor
//

.decl MethodSignatureDescriptor (signature:tyMethodSignatureRef,descriptor:tyMethodDescriptorRef)
.input MethodSignatureDescriptor 

//
// MethodSignatureSimpleName
//

.decl MethodSignatureSimpleName (signature:tyMethodSignatureRef,simplename:tySimpleNameRef)
.input MethodSignatureSimpleName 

//
// MethodSignatureType
//

.decl MethodSignatureType (signature:tyMethodSignatureRef,type:tyType)
.input MethodSignatureType 


//
// NestedClass
//

.decl NestedClass (enclosingClass:tyType,nestedClass:tyType)
.input NestedClass 

//
// ReifiedClass
//

.decl ReifiedClass (type:tyType,heap:tyClassConstant)
.input ReifiedClass 

//
// ReturnVar
//

.decl ReturnVar (var:tyVarRef,method:tyMethodSignatureRef)
.input ReturnVar 

//
// SimpleNameRef
//

.decl SimpleNameRef (x:tySimpleNameRef)
.input SimpleNameRef 

//
// SpecialMethodInvocationBase
//

.decl SpecialMethodInvocationBase (invocation:tyMethodInvocationRef,base:tyVarRef)
.input SpecialMethodInvocationBase 

//
// SpecialMethodInvocationIn
//

.decl SpecialMethodInvocationIn (invocation:tyMethodInvocationRef,inmethod:tyMethodSignatureRef)
.input SpecialMethodInvocationIn 

//
// SpecialMethodInvocationSignature
//

.decl SpecialMethodInvocationSignature (invocation:tyMethodInvocationRef,signature:tyMethodSignatureRef)
.input SpecialMethodInvocationSignature 

//
// StaticMethodInvocation
//

.decl StaticMethodInvocation (invocation:tyMethodInvocationRef,signature:tyMethodSignatureRef,inmethod:tyMethodSignatureRef)
.input StaticMethodInvocation 

//
// StaticMethodInvocationIn
//

.decl StaticMethodInvocationIn (invocation:tyMethodInvocationRef,inmethod:tyMethodSignatureRef)
.input StaticMethodInvocationIn 

//
// StaticMethodInvocationSignature
//

.decl StaticMethodInvocationSignature (invocation:tyMethodInvocationRef,signature:tyMethodSignatureRef)
.input StaticMethodInvocationSignature 

//
// StoreArrayIndex
//

.decl StoreArrayIndex (from:tyVarRef,base:tyVarRef,inmethod:tyMethodSignatureRef)
.input StoreArrayIndex 

//
// StoreInstanceFieldIndex
//

.decl StoreInstanceFieldIndex (from:tyVarRef,base:tyVarRef,index:number,inmethod:tyMethodSignatureRef)
.input StoreInstanceFieldIndex 

//
// StorePrimStaticField
//

.decl StorePrimStaticField (signature:tyFieldSignatureRef,inmethod:tyMethodSignatureRef)
.input StorePrimStaticField 

//
// StoreStaticField
//

.decl StoreStaticField (from:tyVarRef,signature:tyFieldSignatureRef,inmethod:tyMethodSignatureRef)
.input StoreStaticField 

//
// StoreStaticFieldDebugInfo
//

.decl StoreStaticFieldDebugInfo (file:tyFile,line:number,from:tyVarRef,field:tyFieldSignatureRef)
.input StoreStaticFieldDebugInfo 

//
// StringConstant
//

.decl StringConstant (x:tyStringConstant)
.input StringConstant 

//
// ThisVar
//

.decl ThisVar (method:tyMethodSignatureRef,var:tyVarRef)
.input ThisVar 

//
// UnknownReturnedHeapAllocation
//

.decl UnknownReturnedHeapAllocation (callsite:tyMethodInvocationRef,heap:tyHeapAllocationRef)
.input UnknownReturnedHeapAllocation 

//
// VarType
//

.decl VarType (ref:tyVarRef,type:tyType)
.input VarType 

//
// VarDeclaringMethod
//

.decl VarDeclaringMethod (var:tyVarRef, method:tyMethodSignatureRef)
.input VarDeclaringMethod

//
// VarargsActualParam
//

.decl VarargsActualParam (var:tyVarRef,index:number,invocation:tyMethodInvocationRef)
.input VarargsActualParam 

//
// VirtualMethodInvocationBase
//

.decl VirtualMethodInvocationBase (invocation:tyMethodInvocationRef,base:tyVarRef)
.input VirtualMethodInvocationBase 

//
// VirtualMethodInvocationIn
//

.decl VirtualMethodInvocationIn (invocation:tyMethodInvocationRef,inmethod:tyMethodSignatureRef)
.input VirtualMethodInvocationIn 

//
// VirtualMethodInvocationSignature
//

.decl VirtualMethodInvocationSignature (invocation:tyMethodInvocationRef,signature:tyMethodSignatureRef)
.input VirtualMethodInvocationSignature 

//
// InterfaceType
//

.decl InterfaceType (x:tyInterfaceType)
.input InterfaceType 

//
// MethodDescriptorRef
//

.decl MethodDescriptorRef (x:tyMethodDescriptorRef)
.input MethodDescriptorRef 

//
// MethodInvocationRef
//

.decl MethodInvocationRef (x:tyMethodInvocationRef)
.input MethodInvocationRef 

//
// MethodSignatureRef
//

.decl MethodSignatureRef (x:tyMethodSignatureRef)
.input MethodSignatureRef 
.decl MethodSignatureRefDebugInfo (file:tyFile,line:number,x:tyMethodSignatureRef)
.input MethodSignatureRefDebugInfo

//
// ModifierRef
//

.decl ModifierRef (x:tyModifierRef)
.input ModifierRef 

//
// NullType
//

.decl NullType (x:tyNullType)
.input NullType 

//
// PrimitiveType
//

.decl PrimitiveType (t:tyPrimitiveType)
.input PrimitiveType 

.decl VarRef (v:tyVarRef)
.input VarRef
.decl VarRefDebugInfo (file:tyFile,line:number,v:tyVarRef)
.input VarRefDebugInfo


//
// local variables inside a method
//

//.decl MethodVarRef (method:MethodSignatureRef,var:VarRef)
.input MethodVarRef




  //
  // HeapAllocationType
  //
  
.decl HeapAllocationType (heap:tyHeapAllocationRef,type:tyType)
.input HeapAllocationType
  
  
  //
  // AssignHeapAllocation
  //
  
  
.decl AssignHeapAllocation (heap:tyHeapAllocationRef,to:tyVarRef,inmethod:tyMethodSignatureRef)
.input AssignHeapAllocation



#ifdef ADAPTIVE_CONTEXT_SENSITIVITY 


.decl ObjectNotToRefine (heap:tyHeapAllocationRef)
.input ObjectNotToRefine

   
.decl Object3HContext (heap:tyHeapAllocationRef)
.input Object3HContext


.decl Object2HContext (heap:tyHeapAllocationRef)
.input Object2HContext


.decl InvocationNotToRefine (invocation:tyMethodInvocationRef)
.input InvocationNotToRefine


#endif 
    
   
#ifdef FLOW_SENSITIVE
.decl BasicBlockSuccessorVarNotNull (bb1:tyBasicBlockRef, bb2:tyBasicBlockRef, var:tyVarRef)
.input BasicBlockSuccessorVarNotNull 
.decl BasicBlockSuccessorVarNull (bb1:tyBasicBlockRef, bb2:tyBasicBlockRef, var:tyVarRef)
.input BasicBlockSuccessorVarNull 
#endif

